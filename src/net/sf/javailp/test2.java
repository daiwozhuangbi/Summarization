package net.sf.javailp;

import java.util.Map;
import java.util.TreeMap;

import net.sf.javailp.Linear;
import net.sf.javailp.Operator;
import net.sf.javailp.OptType;
import net.sf.javailp.Problem;
import net.sf.javailp.Result;
import net.sf.javailp.Solver;
import net.sf.javailp.SolverGLPK;
import net.sf.javailp.VarType;

public class test2 {
	/**
	  * @param args 
	  */ 
	 public static void main(String[] args) { 
	//  test(new SolverGurobi()); 
		GLPK(new SolverGLPK()); 
	//  test(new SolverCPLEX()); 
	 } 
	 
 public static void GLPK(Solver solver) { 
      
//      double[][]sim = {{0,2,5,8,6,2},{2,0,3,4,2,1},{5,3,0,1,3,8},
//    		  {8,4,1,0,7,4},{6,2,3,7,0,3},{2,1,8,4,3,0}};
	  double[][] sim = {{0.0, 0.9921002733589561, 0.9951998245791881, 0.9926907915751381, 0.9924086692252008, 0.9777591990585818, 0.9904628475174491, 0.9945218219772518, 0.9963793838432572, 0.993007669240537, 0.9933043769089616, 0.9884778949520971, 0.9887220047459747, 0.9883626596702673, 0.9876221688074682, 0.9901037100970569, 0.9920892562685062, 0.986805169389549, 0.9889413943732241, 0.9659757359878813},
			  {0.9921002733589561, 0.0, 0.9908730853096898, 0.9908823200601589, 0.9892711130796068, 0.9785367963225001, 0.9897998789809239, 0.9976426656911822, 0.9934287566167592, 0.9898055006322313, 0.992678889719409, 0.984211195749482, 0.9879277602710724, 0.9898589659180377, 0.991532411291364, 0.988172511001549, 0.9877364197169836, 0.9846627649132752, 0.9798839287648277, 0.9733874034520329},
			  {0.9951998245791881, 0.9908730853096898, 0.0, 0.99397975262562, 0.9910283360552345, 0.9765406021246971, 0.9939918586301462, 0.9946750276269276, 0.9953894501962957, 0.9961993224989311, 0.9945179247205196, 0.9921192731254964, 0.9931896030971056, 0.9868429946125947, 0.9861836741683621, 0.9923229195939872, 0.991820911813334, 0.9850790702351836, 0.9882342259123268, 0.9670923468808146}, 
			  {0.9926907915751381, 0.9908823200601589, 0.99397975262562, 0.0, 0.9912086598221038, 0.9723743881218369, 0.9892468584853726, 0.9920677824245314, 0.9939020799092232, 0.9883072599119646, 0.992083446513824, 0.9909078907014851, 0.9863582901850005, 0.9907102048326644, 0.9899645900335896, 0.9865163810376998, 0.9944483654885651, 0.9833530414010131, 0.9821112398810756, 0.9703606110998275},
			  {0.9924086692252008, 0.9892711130796068, 0.9910283360552345, 0.9912086598221038, 0.0, 0.9690888156483113, 0.9863275029181773, 0.9907015675068352, 0.9914433725812956, 0.9885525557023203, 0.9904865339442267, 0.9844768902181591, 0.983244711541431, 0.9851214171863778, 0.9821524446021592, 0.9858712128655479, 0.9924485484905735, 0.9900173293788217, 0.9783959645100101, 0.9704063343331851},
			  {0.9777591990585818, 0.9785367963225001, 0.9765406021246971, 0.9723743881218369, 0.9690888156483113, 0.0, 0.9848392312109217, 0.9799612634150852, 0.9846059805863386, 0.9703654565233111, 0.9798418060342915, 0.9643021419668536, 0.9795266477197455, 0.9724200739356992, 0.9825842126604419, 0.973084983536179, 0.970467918946153, 0.9657593042006138, 0.980551372090939, 0.9565756894195949}, 
			  {0.9904628475174491, 0.9897998789809239, 0.9939918586301462, 0.9892468584853726, 0.9863275029181773, 0.9848392312109217, 0.0, 0.9923700143644313, 0.994299399072293, 0.9868168730597869, 0.9933999182554266, 0.984972497828747, 0.9907967261335707, 0.9868718276613683, 0.9862251202049024, 0.9840418235433633, 0.987138659732495, 0.9804544516007702, 0.9846787723791414, 0.9701965059352784},
			  {0.9945218219772518, 0.9976426656911822, 0.9946750276269276, 0.9920677824245314, 0.9907015675068352, 0.9799612634150852, 0.9923700143644313, 0.0, 0.9956961800126719, 0.9926067089137994, 0.9951812392377425, 0.9891123577516717, 0.9894774190417713, 0.9891189321355607, 0.9907356567760957, 0.9908294877175609, 0.9916139783045848, 0.9853629624420155, 0.9818719017145195, 0.9768028468728784},
			  {0.9963793838432572, 0.9934287566167592, 0.9953894501962957, 0.9939020799092232, 0.9914433725812956, 0.9846059805863386, 0.994299399072293, 0.9956961800126719, 0.0, 0.9910916902308424, 0.9958570378314396, 0.9897827577957635, 0.991487138085318, 0.9887766892394468, 0.9903639931668498, 0.9903777431081111, 0.9936087354352933, 0.9851626235342524, 0.9852237922115059, 0.9693240247460361},
			  {0.993007669240537, 0.9898055006322313, 0.9961993224989311, 0.9883072599119646, 0.9885525557023203, 0.9703654565233111, 0.9868168730597869, 0.9926067089137994, 0.9910916902308424, 0.0, 0.9910471905909285, 0.9838876520562874, 0.9926135420648273, 0.9864136965692538, 0.9846980045210726, 0.9954466586822748, 0.9880789548035062, 0.9852844226226172, 0.9858409779523611, 0.9622693590713299},
			  {0.9933043769089616, 0.992678889719409, 0.9945179247205196, 0.992083446513824, 0.9904865339442267, 0.9798418060342915, 0.9933999182554266, 0.9951812392377425, 0.9958570378314396, 0.9910471905909285, 0.0, 0.9878346657675325, 0.992711604868759, 0.988749315206868, 0.9868751855455409, 0.9917863992538969, 0.9925151809549028, 0.9836097576540785, 0.9845861336532129, 0.9746866438094547},
			  {0.9884778949520971, 0.984211195749482, 0.9921192731254964, 0.9909078907014851, 0.9844768902181591, 0.9643021419668536, 0.984972497828747, 0.9891123577516717, 0.9897827577957635, 0.9838876520562874, 0.9878346657675325, 0.0, 0.979646187913866, 0.9816035945938495, 0.9785567103471664, 0.981004134198443, 0.9888689864247374, 0.9753873321521265, 0.9775061917988828, 0.9645580700500724},
			  {0.9887220047459747, 0.9879277602710724, 0.9931896030971056, 0.9863582901850005, 0.983244711541431, 0.9795266477197455, 0.9907967261335707, 0.9894774190417713, 0.991487138085318, 0.9926135420648273, 0.992711604868759, 0.979646187913866, 0.0, 0.9846577724856211, 0.9863466759829126, 0.9948297760510716, 0.9828617546076426, 0.9803234663732069, 0.9876220341804947, 0.9598326278020676},
			  {0.9883626596702673, 0.9898589659180377, 0.9868429946125947, 0.9907102048326644, 0.9851214171863778, 0.9724200739356992, 0.9868718276613683, 0.9891189321355607, 0.9887766892394468, 0.9864136965692538, 0.988749315206868, 0.9816035945938495, 0.9846577724856211, 0.0, 0.9915195881153911, 0.9851028837603126, 0.9880973755996234, 0.981951986457806, 0.9803077277762428, 0.9685383174904852},
			  {0.9876221688074682, 0.991532411291364, 0.9861836741683621, 0.9899645900335896, 0.9821524446021592, 0.9825842126604419, 0.9862251202049024, 0.9907356567760957, 0.9903639931668498, 0.9846980045210726, 0.9868751855455409, 0.9785567103471664, 0.9863466759829126, 0.9915195881153911, 0.0, 0.9844732265192763, 0.9840383916379951, 0.9825745059305286, 0.9765722942480528, 0.9661315825142277},
			  {0.9901037100970569, 0.988172511001549, 0.9923229195939872, 0.9865163810376998, 0.9858712128655479, 0.973084983536179, 0.9840418235433633, 0.9908294877175609, 0.9903777431081111, 0.9954466586822748, 0.9917863992538969, 0.981004134198443, 0.9948297760510716, 0.9851028837603126, 0.9844732265192763, 0.0, 0.9854741493890427, 0.9820069226034227, 0.9850012931927937, 0.9605634529633771},
			  {0.9920892562685062, 0.9877364197169836, 0.991820911813334, 0.9944483654885651, 0.9924485484905735, 0.970467918946153, 0.987138659732495, 0.9916139783045848, 0.9936087354352933, 0.9880789548035062, 0.9925151809549028, 0.9888689864247374, 0.9828617546076426, 0.9880973755996234, 0.9840383916379951, 0.9854741493890427, 0.0, 0.9837699703699099, 0.9778361133032065, 0.9686022203961864},
			  {0.986805169389549, 0.9846627649132752, 0.9850790702351836, 0.9833530414010131, 0.9900173293788217, 0.9657593042006138, 0.9804544516007702, 0.9853629624420155, 0.9851626235342524, 0.9852844226226172, 0.9836097576540785, 0.9753873321521265, 0.9803234663732069, 0.981951986457806, 0.9825745059305286, 0.9820069226034227, 0.9837699703699099, 0.0, 0.9742844971528316, 0.9538044590371798}, 
			  {0.9889413943732241, 0.9798839287648277, 0.9882342259123268, 0.9821112398810756, 0.9783959645100101, 0.980551372090939, 0.9846787723791414, 0.9818719017145195, 0.9852237922115059, 0.9858409779523611, 0.9845861336532129, 0.9775061917988828, 0.9876220341804947, 0.9803077277762428, 0.9765722942480528, 0.9850012931927937, 0.9778361133032065, 0.9742844971528316, 0.0, 0.9506483520873644},
			  {0.9659757359878813, 0.9733874034520329, 0.9670923468808146, 0.9703606110998275, 0.9704063343331851, 0.9565756894195949, 0.9701965059352784, 0.9768028468728784, 0.9693240247460361, 0.9622693590713299, 0.9746866438094547, 0.9645580700500724, 0.9598326278020676, 0.9685383174904852, 0.9661315825142277, 0.9605634529633771, 0.9686022203961864, 0.9538044590371798, 0.9506483520873644, 0.0}};
		 
	  solver.setParameter(Solver.VERBOSE, 0); 
	  solver.setParameter(Solver.TIMEOUT, 100); // set timeout to 100 seconds 
	  solver.setParameter(Solver.METHOD, solver.getInternalValueForID(Solver.METHOD_ID_AUTOMATIC)); 

	  // for one problem 
	  Problem problem = solver.getProblem("GLPK"); 
	  
	  int count=sim.length*sim.length+2*sim.length;
      /** 设置变量 **/
	  for(int h=1;h<=count;h++){
		  problem.addVariable("x"+h, VarType.INT, 0, 1); 
	  }
	  
	  /** 设置目标函数 **/
	  Linear linear = new Linear(); 
	  for(int i=1;i<=2*sim.length;i++)
		linear.add(0,"x"+i);
	  int temp;
	  for(int i=0;i<sim.length;i++)
	        for(int j =0;j<sim.length;j++){
	        	temp = +2*sim.length+sim.length*i+(j+1);
	        	linear.add( sim[i][j], "x"+temp); 
	        }
	 
	  problem.setObjective(linear, OptType.MAX); 
	 
	  /** 设置限制条件 **/
	  //条件1
	  linear = new Linear(); 
	  for(int j=1;j<=sim.length;j++)
		  linear.add(1, "x"+j); 
	 
	  problem.addConstraint("c1", linear, Operator.EQ, 1); 
	  /***********************************************************/
	  //条件2
	  linear = new Linear(); 
	  for(int j=1;j<=sim.length;j++){
		  temp =sim.length+j;
		  linear.add(1, "x"+temp); 
	  }
			 
	  problem.addConstraint("c2", linear, Operator.EQ, 1); 
	  /***********************************************************/
	  //条件3
	  int h = 3;
	  for(int j = 1;j<=sim.length;j++,h++){
		  linear = new Linear();
		  for(int i = 1;i<=sim.length;i++){
			  if(i==j){
				  temp = 2*sim.length+(i-1)*sim.length+j;
				  linear.add(0, "x"+temp); 
			  }
			  else{
				  temp = 2*sim.length+(i-1)*sim.length+j;
				  linear.add(1, "x"+temp); 
			  }
		  } 
		  linear.add(1,"x"+j);
		  problem.addConstraint("c"+h, linear, Operator.EQ, 1);   
	  }
	  
	  /***********************************************************/
	  //条件4	  
	  for(int j = 1;j<=sim.length;j++,h++){
		  linear = new Linear();
		  for(int i = 1;i<=sim.length;i++){
			  if(i==j){
				  temp = 2*sim.length+(j-1)*sim.length+i;
				  linear.add(0, "x"+temp); 
			  }
			  else{
				  temp = 2*sim.length+(j-1)*sim.length+i;
				  linear.add(1, "x"+temp); 
			  }
		  } 
		  temp = j+sim.length;
		  linear.add(1,"x"+temp);
		  problem.addConstraint("c"+h, linear, Operator.EQ, 1);   
	  }
	  /***********************************************************/
	  //条件5
	  for(int i = 1;i<=sim.length;i++){	 
		  for(int j = 1;j<=sim.length;j++){
			  linear = new Linear();
			  if(i==j)
				  continue;
			  temp = 2*sim.length+(i-1)*sim.length+j;
		      linear.add(1, "x"+temp); 
		      temp = 2*sim.length+(j-1)*sim.length+i;
		      linear.add(1, "x"+temp);  
			  problem.addConstraint("c"+h, linear, Operator.LE, 1); 
			  h++;
		  }
	  }
	  /***********************************************************/
	  //条件6
	  for(int i = 1;i<=sim.length;i++){
		  	linear = new Linear();
			linear.add(1, "x"+i); 
			temp = i+sim.length;
		    linear.add(1, "x"+temp);  
			problem.addConstraint("c"+h, linear, Operator.LE, 1); 
			h++;
	  }
	  /***********************************************************/

	  
	 /** 求解 **/
	  Result result = solver.solve(problem); 
	  
//	  System.out.println(result.getPrimalValue("x"));
	  Map<Integer, Integer> ret = new TreeMap<Integer, Integer>();
	  for(int i = 1;i<=count;i++)
		  ret.put(i, (Integer)result.getPrimalValue("x"+i));
	  System.out.println(result); 
	 
	  /**
	   * Extend the problem with x <= 16 and solve it again 
	   */ 
	  /*problem.setVarUpperBound("x", 16);
	 
	  solver = factory.get(); 
	  result = solver.solve(problem); 
	 
	  System.out.println(result);*/ 
	 
	 } 

}
